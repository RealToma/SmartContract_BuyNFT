pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC1155/ERC1155.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";

contract NFTToken is ERC20, Ownable {
    string public nameNFT;
    string public nameSymbol;
    string public nftTokenURI;
    uint256 public nftId;

    mapping(uint256 => string) public tokenURIExists;
    mapping(uint256 => uint256) public tokenIdToValue;
    mapping(address => int256) public amount;
    
    mapping(uint256 => address) public nftBuyers;
    mapping(uint256 => bool) public tokenIdForSale;

    string _baseURIextended;

    constructor() ERC20("THOMAS_NFT", "TFT") {
        nameNFT = "T_NFT";
        nameSymbol = "TFT";
    }

    function totalSupply() public view returns (uint256) {
        return amount[msg.sender];
    }

    function balanceOf(address to_who) public view returns (uint256) {
        return amount[to_who];
    }

    function setBaseURI(string memory baseURI_) external {
        _baseURIextended = baseURI_;
    }

    function _setTokenURI(uint256 tokenId, string memory _tokenURI)
        internal
        virtual
    {
        require(
            _exists(tokenId),
            "ERC20Metadata: URI set of nonexistent token"
        );
        tokenURIExists[tokenId] = _tokenURI;
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return _baseURIextended;
    }

    function tokenURI(uint256 tokenId)
        public
        view
        virtual
        override
        returns (string memory)
    {
        require(
            _exists(tokenId),
            "ERC20Metadata: URI query for nonexistent token"
        );

        string memory _tokenURI = tokenURIExists[tokenId];
        string memory base = _baseURI();

        if (bytes(base).length == 0) {
            return _tokenURI;
        }
        if (bytes(_tokenURI).length > 0) {
            return string(abi.encodePacked(base, _tokenURI));
        }
        return string(abi.encodePacked(base, tokenId));
    }

    function Mint(string memory _tokenURI, uint256 _nftPrice)
        public
        returns (uint256)
    {
        require(msg.sender != address(0));
        nftTokenURI = _tokenURI;

        nftId++;
        require(!_exists(nftId));
        tokenIdToValue[nftId] = _nftPrice;
        _mint(msg.sender, nftId);
        _setTokenURI(nftId, nftTokenURI);

        return nftId;
    }

    function transfer(string memory _tokenURI, uint256 nftId) public {
        require(msg.sender != address(0));
        idToOwner[_tokenId] = _tokenURI;
        emit Transfer(msg.sender, _tokenURI, uint256);
    }

    function tokenPrice(uint256 _tokenID)
        public
        view
        returns (uint256 nftPrice)
    {
        require(!_exists(nftId));
        nftPrice = tokenIdToValue[_tokenID];
    }

    function nftBuy(uint256 _tokenId) payable public {
        require(tokenIdForSale[_tokenId],"Token must be on sale first");
        uint nftPrice = NFT.tokenPrice(_tokenId);
        require(msg.value >= nftPrice, "Insufficient balance.");
        
        token.transfer(payable(NFT.ownerOf(_tokenId)),nftPrice);
        nftBuyers[_tokenId] = msg.sender;
        
    }
}
